name: Python CI/CD Pipeline with MySQL and API Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write
  pages: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DATABASE: bank
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Verify File Structure
        run: |
          echo "Listing main directory:"
          ls -la
          echo "Listing db-tests directory:"
          ls -la db-tests/
          echo "Checking if schema.sql exists:"
          test -f db-tests/schema.sql && echo "schema.sql exists" || echo "schema.sql not found"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest==8.3.4
          pip install allure-pytest==2.13.2
          pip install pymysql
          pip install cryptography
          pip install flask
          pip install requests==2.28.1
          pip install python-dotenv
          pip install mysql-connector-python
          pip install faker

      - name: Verify MySQL connection
        run: |
          python -c "
          import pymysql
          import os
          conn = pymysql.connect(
              host='127.0.0.1',
              user='root',
              password='${{ secrets.DB_PASSWORD }}',
              database='bank'
          )
          print('MySQL connection successful')
          conn.close()
          "

      - name: Install Allure
        run: |
          curl -o allure-2.24.1.tgz -OL https://github.com/allure-framework/allure2/releases/download/2.24.1/allure-2.24.1.tgz
          sudo tar -zxvf allure-2.24.1.tgz -C /opt/
          sudo ln -s /opt/allure-2.24.1/bin/allure /usr/bin/allure
          allure --version

      - name: Set up database schema
        run: |
          mysql -h 127.0.0.1 -u root -p${{ secrets.DB_PASSWORD }} bank < db-tests/schema.sql
          python db-tests/generate_data.py
        env:
          DB_HOST: 127.0.0.1
          DB_USER: root
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: bank

      - name: Run Database Tests
        run: |
          PYTHONPATH=$PYTHONPATH:$(pwd) pytest db-tests/tests/tests_query.py -v --alluredir=allure-results
        env:
          DB_HOST: 127.0.0.1
          DB_USER: root
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: bank

      - name: Start API Server
        run: |
          echo "Starting API server..."
          python api_tests/api_test.py &
          echo "Waiting for server to start..."
          sleep 15
          echo "Checking server status..."
          curl -v http://127.0.0.1:5000/api/users || true
        env:
          DB_HOST: 127.0.0.1
          DB_USER: root
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: bank

      - name: Run API Tests
        run: |
          PYTHONPATH=$PYTHONPATH:$(pwd) pytest api_tests/test_api.py -v --alluredir=allure-results
        env:
          DB_HOST: 127.0.0.1
          DB_USER: root
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: bank

      - name: Generate Allure Report
        if: always()
        run: |
          allure generate allure-results -o allure-report --clean

      - name: Deploy to GitHub Pages
        if: success() || failure()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          force_orphan: true